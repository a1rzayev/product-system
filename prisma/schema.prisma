// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication and user management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("CUSTOMER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders   Order[]
  reviews  Review[]
  cart     CartItem[]
  createdTodos Todo[] @relation("TodoCreator")
  assignedTodos Todo[] @relation("TodoAssignee")

  @@map("users")
}

// Product categories
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  parentId    String?
  notes       String?  // Admin notes/comments
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]
  images    CategoryImage[]

  @@map("categories")
}

// Category images
model CategoryImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  categoryId String
  createdAt DateTime @default(now())

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("category_images")
}

// Main product model
model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  slug        String   @unique
  sku         String   @unique
  price       Float
  comparePrice Float?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  weight      Float?
  dimensions  String?  // JSON string for SQLite
  notes       String?  // Admin notes/comments
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category     Category        @relation(fields: [categoryId], references: [id])
  images       ProductImage[]
  variants     ProductVariant[]
  inventory    Inventory?
  reviews      Review[]
  orderItems   OrderItem[]
  cartItems    CartItem[]

  @@map("products")
}

// Product images
model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  productId String
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Product variants (size, color, etc.)
model ProductVariant {
  id        String   @id @default(cuid())
  name      String   // e.g., "Size", "Color"
  value     String   // e.g., "Large", "Red"
  sku       String   @unique
  price     Float?   // Override product price if different
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("product_variants")
}

// Inventory management
model Inventory {
  id        String   @id @default(cuid())
  quantity  Int      @default(0)
  reserved  Int      @default(0) // Items in cart/orders
  productId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

// Customer orders
model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  status        String      @default("PENDING")
  total         Float
  subtotal      Float
  tax           Float       @default(0)
  shipping      Float       @default(0)
  discount      Float       @default(0)
  customerId    String
  shippingAddress String    // JSON string for SQLite
  billingAddress  String    // JSON string for SQLite
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  customer  User        @relation(fields: [customerId], references: [id])
  items     OrderItem[]

  @@map("orders")
}

// Individual items in orders
model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  productId String
  variantId String?
  createdAt DateTime @default(now())

  // Relations
  order   Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product       @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

// Product reviews and ratings
model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // One review per user per product
  @@map("reviews")
}

// Shopping cart items
model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  userId    String
  productId String
  variantId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product      @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([userId, productId, variantId]) // One cart item per user per product variant
  @@map("cart_items")
}

// Todo items for admin tasks
model Todo {
  id          String    @id @default(cuid())
  title       String
  description String?
  isCompleted Boolean   @default(false)
  status      String    @default("UNDONE") // UNDONE, IN_PROGRESS, DONE
  priority    String    @default("MEDIUM") // LOW, MEDIUM, HIGH
  dueDate     DateTime?
  assignedTo  String?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  creator   User   @relation("TodoCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  assignee  User?  @relation("TodoAssignee", fields: [assignedTo], references: [id], onDelete: SetNull)

  @@map("todos")
}
